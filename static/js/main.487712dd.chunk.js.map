{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["OSMMap","venue","zoom","position","lat","lng","Map","center","id","TileLayer","attribution","url","Marker","Popup","address","App","useState","searchAddress","setSearchAddress","searchSuggestions","setSearchSuggestions","setVenue","doSearch","a","fetch","response","json","data","results","uniqBy","candidates","map","candidate","key","location","y","x","console","error","effect","delay","deps","callback","useCallback","useEffect","handler","setTimeout","clearTimeout","useDebouncedEffect","className","style","type","value","onChange","e","target","placeholder","height","onClick","length","title","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.487712dd.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport uniqBy from \"lodash.uniqby\";\nimport \"./App.css\";\n\nconst useDebouncedEffect = (effect, delay, deps) => {\n  const callback = useCallback(effect, deps);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      callback();\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [callback, delay]);\n};\n\nconst OSMMap = ({ venue, zoom = 15 }) => {\n  const position = [venue.lat, venue.lng];\n\n  return (\n    <Map center={position} zoom={zoom} id=\"geocoded-result\">\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <Marker position={position}>\n        <Popup>{venue.address}</Popup>\n      </Marker>\n    </Map>\n  );\n};\n\nconst App = () => {\n  const [searchAddress, setSearchAddress] = useState(\"\");\n  const [searchSuggestions, setSearchSuggestions] = useState([]);\n  const [venue, setVenue] = useState(null);\n\n  const doSearch = async () => {\n    try {\n      const response = await fetch(\n        `https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates?f=json&singleLine=${searchAddress}&outFields=Match_addr,Addr_type`\n      );\n      const data = await response.json();\n      const results = uniqBy(\n        (data?.candidates ?? []).map(candidate => ({\n          ...candidate,\n          key: `${candidate.location?.y ?? 0} ${candidate.location?.x ?? 0}`\n        })),\n        \"key\"\n      );\n      setSearchSuggestions(results);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useDebouncedEffect(() => doSearch(), 600, [searchAddress]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"autosuggest-address\" style={{ position: \"relative\" }}>\n          <input\n            type=\"text\"\n            value={searchAddress}\n            onChange={e => setSearchAddress(e.target.value)}\n            placeholder=\"Type an address...\"\n            style={{ height: 40 }}\n          />\n          <button\n            onClick={() => {\n              setVenue(null);\n              setSearchAddress(\"\");\n              setSearchSuggestions([]);\n            }}\n          >\n            Clear\n          </button>\n          {searchSuggestions?.length > 0 && (\n            <div className=\"suggestions-wrapper\">\n              <ul>\n                {searchSuggestions.map(candidate => (\n                  <li\n                    title={`Address: ${candidate.address}, location: ${candidate\n                      .location?.y ?? 0}, ${candidate.location?.x ?? 0}`}\n                    key={candidate.key}\n                  >\n                    <button\n                      onClick={() => {\n                        setVenue({\n                          address: candidate.address,\n                          lat: candidate.location?.y ?? 0,\n                          lng: candidate.location?.x ?? 0\n                        });\n                        setSearchSuggestions([]);\n                      }}\n                    >\n                      {candidate.address}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n        {venue && (\n          <div className=\"results\">\n            <p>\n              Address: {venue.address}\n              <br />\n              Latitude: {venue.lat}\n              <br />\n              Longitude: {venue.lng}\n            </p>\n            <OSMMap venue={venue} />\n          </div>\n        )}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}